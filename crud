from sqlalchemy.ext.asyncio import async_sessionmaker, AsyncSession
from models import User
from sqlalchemy.future import select
from datetime import datetime, timezone
from models import Notification ,RuleViolation ,VehicleOwnership , Vehicle , TrafficPersonnel , Video

import json



class CRUD:
    
    async def add_user(self, async_session: async_sessionmaker[AsyncSession], user: User):
        async with async_session() as session:
            session.add(user)
            await session.commit()
        return user
    
    async def authenticate_user(self,async_session: async_sessionmaker[AsyncSession], license_number: str, password: str):
        async with async_session() as session:
            result = await session.execute(
                select(User).where(User.user_licensenumber == license_number)
            )
            user = result.scalars().first()

            if not user:
                return None
            if user.user_password != password:
                return None
            return user
        


    async def add_notify_violation(self,async_session: async_sessionmaker[AsyncSession], violation_id: int, licence_number: str,message:str):
        async with async_session() as session:
            notification = Notification(
                    notification_message = message,
                    notification_senttimestamp = datetime.now(timezone.utc).replace(tzinfo=None),
                    notification_status="Payment Pending",
                    violation_id = violation_id,
                    user_licensenumber = licence_number
            )

            session.add(notification)
            await session.commit()


    async def report_violation(self,async_session:async_sessionmaker[AsyncSession],violation_type:str,violation_status:str,vehicle_id:int,video_id:int):
        async with async_session() as session:
            violation = RuleViolation(
                violation_type = violation_type,
                violation_timestamp = datetime.now(timezone.utc).replace(tzinfo=None),
                violation_status = violation_status,
                vehicle_id=vehicle_id,
                video_id = video_id
            )
            session.add(violation)
            await session.commit()

    async def register_vehicle(self,async_session:async_sessionmaker[AsyncSession],vehicle_type:str,licenceplate_number:str):
        async with async_session() as session:
            vehicle = Vehicle(
                vechicle_type = vehicle_type,
                licenceplate_number = licenceplate_number
            )
            session.add(vehicle)
            await session.commit()

    async def register_vehicle_owner(self,async_session:async_sessionmaker[AsyncSession],vehicle_id:int,licenceplate_number:str,current_ownership:bool):
        async with async_session() as session:
            vehicle_owner = VehicleOwnership(
                current_ownership = current_ownership,
                vehicle_id = vehicle_id,
                user_licenseNumber = licenceplate_number
            )
            session.add(vehicle_owner)
            await session.commit()

    async def upload_video(self,async_session:async_sessionmaker[AsyncSession],video_path:int,licenceplate_number:str,uploadedbyId:int):
        async with async_session() as session:
            upload_video = Video(
                video_path= video_path,
                uploadtime_stamp = datetime.now(timezone.utc).replace(tzinfo=None),
                uploadedbyId = uploadedbyId
            )
            session.add(upload_video)
            await session.commit()


    async def register_trafficPersonnel(self,async_session:async_sessionmaker[AsyncSession],t_fname:str,t_lname:str,t_phonenumber:str):
        async with async_session() as session:
            traffic_personnel = TrafficPersonnel(
                tp_fname =  t_fname,
                tp_lname = t_lname,
                tp_phonenumber = t_phonenumber
            )
            session.add(traffic_personnel)
            await session.commit()


 